<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:documentation>
	<aura:description>
		<p>
			<code>ui:inputDefaultError</code> is the default error handling for your input components. This component displays as a list of errors below the field.
			Field-level error messages can be added using <code>addErrors()</code>. You can use the default error handling by setting the input value to false and adding the error message. 
			For example, this component validates if the input is a number.
		</p>
<pre>&lt;aura:component>
    Enter a number: &lt;ui:inputNumber aura:id="inputCmp" label="number"/>
    &lt;ui:button label="Submit" press="{!c.doAction}"/>
&lt;/aura:component></pre>
  		<p>This client-side controller displays an error if the input is not a number.</p>
<pre>doAction : function(component, event) {
    var inputCmp = cmp.find("inputCmp");
    var value = inputCmp.get("v.value");
    if (isNaN(value)) {
        inputCmp.setValue("v.value", false);
        inputCmp.addErrors("v.value", [{message:"Input not a number: " + value}]);
    } else {
        //clear error
        inputCmp.setValid("v.value", true);
    }
}</pre>
		<p>Alternatively, you can provide your own <code>ui:inputDefaultError</code> component. This example returns an error message if
		the <code>warnings</code> attribute contains any messages.</p>
<pre>&lt;aura:component>
      &lt;aura:attribute name="warnings" type="String[]" description="Warnings for input text"/>
    Enter a number: &lt;ui:inputNumber aura:id="inputCmp" label="number"/>
    &lt;ui:button label="Submit" press="{!c.doAction}"/>
    &lt;ui:inputDefaultError aura:id="number" value="{!v.warnings}" />
&lt;/aura:component></pre>
		<p>This client-side controller diplays an error by adding a string to the <code>warnings</code> attribute.</p>
<pre>doAction : function(component, event) {
    var inputCmp = component.find("inputCmp");
    var value = inputCmp.get("v.value");

    // is input numeric?
    if (isNaN(value)) {
       component.set("v.warnings", "Input is not a number");
    } else {
       // clear error
       component.set("v.warnings", null);
    }
}</pre>		

	</aura:description>	
		<aura:example name="inputDefaultError" ref="uiExamples:inputTextExample" label="Using Field-Level Errors">
    	<p>This example shows a <code>ui:inputText</code> component with the default error handling, and a corresponding <code>ui:outputText</code> component for text rendering.</p>
	</aura:example>
	
</aura:documentation>
